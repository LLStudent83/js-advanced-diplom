import themes from './themes';
import { generateTeam } from './generators';
import Team from './Team';
import GameState from './GameState';
import GamePlay from './GamePlay';
import cursors from './cursors';
import { calc–°ruisingRange } from './utils';

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
    this.arrPositionsPlayer = [0, 1, 8, 9, 16, 17, 24, 25, 32, 33, 40, 41, 48, 49];
    this.arrPositionsPC = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 62, 63];
    this.playerTurnParameters = {
      swordsman: 4,
      bowman: 2,
      magician: 1,
      daemon: 1,
      undead: 4,
      vampire: 2,
    };
    this.playerAttacParameters = {
      swordsman: 1,
      bowman: 2,
      magician: 4,
      daemon: 4,
      undead: 1,
      vampire: 2,
    };
  }

  init() {
    if (!GameState.state) {
      this.gamePlay.drawUi(themes.prairie);
      const arrObjCharRendomPlayer = generateTeam(new Team().arrObjChar, 1, 2, this.arrPositionsPlayer);
      const arrObjCharRendomPC = generateTeam(new Team().arrObjChar, 1, 2, this.arrPositionsPC);
      this.arrSummCharPosition = [...arrObjCharRendomPlayer, ...arrObjCharRendomPC];
      this.gamePlay.redrawPositions(this.arrSummCharPosition);
      GameState.from(
        {
          level: 1,
          charPl: arrObjCharRendomPlayer,
          charPC: arrObjCharRendomPC,
          step: 'user',
          state: 'activ',
          scores: 0,
          maxLevel: 1,
        },
      );
    } else {
      const { level } = GameState;
      let theme;
      if (level === 1) {
        theme = themes.prairie;
      } if (level === 2) {
        theme = themes.desert;
      } if (level === 3) {
        theme = themes.arctic;
      } if (level === 3) {
        theme = themes.mountain;
      }

      this.gamePlay.drawUi(theme);

      this.arrSummCharPosition = [...GameState.charPC, ...GameState.charPl];
      // –º–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –Ω–∞ –ø–æ–ª–µ
      this.gamePlay.redrawPositions(this.arrSummCharPosition);
    }

    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this));
    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this));
    this.gamePlay.addCellClickListener(this.onCellClick.bind(this));

    this.gamePlay.addNewGameListener(() => {
      GameState.from({ state: null });
      this.init();
    });
    // TODO: add event listeners to gamePlay events
    // TODO: load saved stated from stateService
  }

  onCellClick(index) {
    const activCharPl = GameState.charPl.find((element) => element.position === index);

    // –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞
    const activCharPC = GameState.charPC.find((element) => element.position === index);
    // –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ü–ö
    if (!(activCharPl || activCharPC)) {
      return;
    }
    if (activCharPC) {
      GamePlay.showError('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
      return;
    }
    const noomCellActivChar = Array.from(this.gamePlay.cells)
      .findIndex((element) => element.classList.contains('selected'));
    // –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if (noomCellActivChar === -1) {
      this.gamePlay.selectCell(activCharPl.position);
      return;
    }
    if (!(noomCellActivChar === activCharPl.position)) {
      this.gamePlay.deselectCell(noomCellActivChar);
      this.gamePlay.selectCell(activCharPl.position);
    }
    // TODO: react to click
  }

  onCellEnter(index) {
    // –±–ª–æ–∫ –æ—Ç–æ–±–æ–∞–∂–µ–Ω–∏—è —Ç—É–ª–±–∞—Ä–∞
    const activSellChar = this.arrSummCharPosition.find((element) => element.position === index);
    // –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
    if (activSellChar) {
      const message = `üéñ${activSellChar.character.level} ‚öî${activSellChar.character.attack} 
      üõ°${activSellChar.character.defence} ‚ù§${activSellChar.character.health}`;
      this.gamePlay.showCellTooltip(message, index);
    }
    // –±–ª–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–æ—Ä–∞
    for (const char of GameState.charPl) {
      if (char.position === index) {
        this.gamePlay.setCursor(cursors.pointer);
      }
    }
    // –±–ª–æ–∫ –≤—ã–¥–µ–ª–µ–Ω–∏—è —è—á–µ–π–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const numActivSell = Array.from(this.gamePlay.cells) // –Ω–æ–º–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ–π —è—á–µ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      .findIndex((element) => element.classList.contains('selected') && element.firstChild);
      // –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–ª–∞—Å—Å–∞
    if (numActivSell !== -1) { // –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ .....
      let dist;
      const nameActivChar = GameState.charPl.find((char) => char.position === numActivSell).character.type;
      // eslint-disable-next-line guard-for-in
      for (const key in this.playerTurnParameters) {
        if (key === nameActivChar) { // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞–ª—å–Ω–æ—Å—Ç—å —Ö–æ–¥–∞ —Ñ–∏–≥—É—Ä
          dist = this.playerTurnParameters[key];
        }
      }
      const indexSellWithoutChar = Array.from(this.gamePlay.cells).findIndex((element) => element.classList
        .contains('selected') && !element.firstChild);
      if (indexSellWithoutChar !== -1) {
        this.gamePlay.deselectCell(indexSellWithoutChar);
      }
      if (calc–°ruisingRange(numActivSell, index, dist) !== -1
       && !(this.gamePlay.cells[index].firstChild)) {
        // —ç—Ç–∞ —Ñ–æ—Ä–º—É–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –∫–ª–µ—Ç–∫–∏ —Ö–æ–¥–∞ –∏–ª–∏ -1
        this.gamePlay.selectCell(index, 'green');
        this.gamePlay.setCursor(cursors.pointer);
      }
    }

    // –∏ –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ —Ä–∞–≤–µ–Ω ..... —É—Å–ª–æ–≤–∏—é –≤—ã–¥–µ–ª–∏—Ç—å –µ–≥–æ –∑–µ–ª–µ–Ω—ã–º –ø—É–Ω–∫—Ç–∏—Ä–æ–º
    // this.playerTurnParameters;

    // if (–∏–≥—Ä–æ–∫ –≤—ã–¥–µ–ª–µ–Ω –∑–µ–ª–µ–Ω—ã–º –∫—Ä—É–≥–æ–º –∏ –∫—É—Ä—Å–æ—Ä –≤ –ø–æ–ª–µ –∑–æ–Ω—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è) {
    //  –≤—ã–¥–µ–ª–∏—Ç—å –∫–ª–µ—Ç–∫—É —à—Ç—Ä–∏—Ö–ø—É–Ω–∫—Ç–∏—Ä–Ω—ã–º –∫—Ä—É–≥–æ–∏ –∏ –∫—É—Ä—Å–æ—Ä –ø–∞–ª–µ—Ü green
    //  }
  }

  onCellLeave(index) {
    this.gamePlay.hideCellTooltip(index);
    this.gamePlay.setCursor(cursors.auto);
    // TODO: react to mouse leave
  }
}
// –•–æ–¥
// –ú–µ—á–Ω–∏–∫–∏/–°–∫–µ–ª–µ—Ç—ã - 4 –∫–ª–µ—Ç–∫–∏ –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
// –õ—É—á–Ω–∏–∫–∏/–í–∞–º–ø–∏—Ä—ã - 2 –∫–ª–µ—Ç–∫–∏ –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
// –ú–∞–≥–∏/–î–µ–º–æ–Ω—ã - 1 –∫–ª–µ—Ç–∫–∞ –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
// –ê—Ç–∞–∫–∞
// –ú–µ—á–Ω–∏–∫–∏/–°–∫–µ–ª–µ—Ç—ã - –º–æ–≥—É—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ—Å–µ–¥–Ω—é—é –∫–ª–µ—Ç–∫—É
// –õ—É—á–Ω–∏–∫–∏/–í–∞–º–ø–∏—Ä—ã - –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –∫–ª–µ—Ç–∫–∏
// –ú–∞–≥–∏/–î–µ–º–æ–Ω—ã - –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 4 –∫–ª–µ—Ç–∫–∏

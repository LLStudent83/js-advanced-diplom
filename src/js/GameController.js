import themes from './themes';
import { generateTeam } from './generators';
import Team from './Team';
import GameState from './GameState';
import GamePlay from './GamePlay';
import cursors from './cursors';
import { calcAreaAction, getMoveSellForPC } from './utils';

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
    this.arrPositionsPlayer = [0, 1, 8, 9, 16, 17, 24, 25, 32, 33, 40, 41, 48, 49];
    this.arrPositionsPC = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 62, 63];
  }

  init() {
    if (!GameState.state) {
      this.gamePlay.drawUi(themes.prairie);
      const arrObjCharRendomPlayer = generateTeam(new Team().arrObjChar, 1, 2, this.arrPositionsPlayer);
      const arrObjCharRendomPC = generateTeam(new Team().arrObjChar, 1, 2, this.arrPositionsPC);
      this.arrSummCharPosition = [...arrObjCharRendomPlayer, ...arrObjCharRendomPC];
      this.gamePlay.redrawPositions(this.arrSummCharPosition);
      GameState.from(
        {
          level: 1,
          charPl: arrObjCharRendomPlayer,
          charPC: arrObjCharRendomPC,
          step: 'user',
          state: 'activ',
          scores: 0,
          maxLevel: 1,
        },
      );
    } else {
      const { level } = GameState;
      let theme;
      if (level === 1) {
        theme = themes.prairie;
      } if (level === 2) {
        theme = themes.desert;
      } if (level === 3) {
        theme = themes.arctic;
      } if (level === 3) {
        theme = themes.mountain;
      }

      this.gamePlay.drawUi(theme);

      this.arrSummCharPosition = [...GameState.charPC, ...GameState.charPl];
      // –º–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –Ω–∞ –ø–æ–ª–µ
      this.gamePlay.redrawPositions(this.arrSummCharPosition);
    }

    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this));
    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this));
    this.gamePlay.addCellClickListener(this.onCellClick.bind(this));

    this.gamePlay.addNewGameListener(() => {
      GameState.from({ state: null });
      this.init();
    });
    // TODO: add event listeners to gamePlay events
    // TODO: load saved stated from stateService
  }

  onCellClick(index) {
    const noomCellActivCharPl = Array.from(this.gamePlay.cells)
      .findIndex((element) => element.classList.contains('selected-yellow') && element.firstChild);
      // –≤—ã—à–µ –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–≥—Ä–æ–∫–∞
    const CharPl = GameState.charPl.find((element) => element.position === index);
    // –≤—ã—à–µ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –∫–ª–µ—Ç–∫–µ –∫—É–¥–∞ –∫–ª–∏–∫–Ω—É–ª
    const CharPC = GameState.charPC.find((element) => element.position === index);
    // –≤—ã—à–µ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ü–ö –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –∫–ª–µ—Ç–∫–µ –∫—É–¥–∞ –∫–ª–∏–∫–Ω—É–ª

    // ____________________–Ω–∏–∂–µ –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è_______________________________
    if (!(CharPl || CharPC)) { // –µ—Å–ª–∏ –ø–æ–ø–∞–ª –≤ –∫–ª–µ—Ç–∫—É –≥–¥–µ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
      if (this.gamePlay.cells[index].classList.contains('selected-green')) {
        //  –Ω–∏–∂–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä–æ–∫–∞ —Å –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
        const newArrCharePl = GameState.charPl.map((char) => {
          if (this.gamePlay.cells[char.position].classList.contains('selected')) {
            char.position = index;
            return char;
          } return char;
        });
        GameState.charPl = newArrCharePl;
        GameState.step = 'PC';
        this.arrSummCharPosition = [...GameState.charPC, ...GameState.charPl];
        // –≤—ã—à–µ –º–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –Ω–∞ –ø–æ–ª–µ
        this.gamePlay.redrawPositions(this.arrSummCharPosition);

        this.gamePlay.deselectCell(noomCellActivCharPl);
        this.gamePlay.selectCell(index);
        this.strokePC();
      }
      return;
    }
    if (CharPC && !this.gamePlay.cells[index].classList.contains('selected-red')
    && noomCellActivCharPl === -1) {
      GamePlay.showError('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
      return;
    }
    if (CharPC && !this.gamePlay.cells[index].classList.contains('selected-red')
    && noomCellActivCharPl !== -1) {
      GamePlay.showError('–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –¥–æ—Ç—è–Ω—É–ª—Å—è –¥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. –ü–æ–¥–±–µ—Ä–∏—Ç–µ—Å—å –ø–æ –±–ª–∏–∂–µ :-)');
      return;
    }
    // _______________________–Ω–∏–∂–µ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞—Ç–∞–∫–∏____________________
    if (CharPC && this.gamePlay.cells[index].classList.contains('selected-red')) {
      const activCharPl = GameState.charPl.find((char) => char.position === noomCellActivCharPl);
      const damageSize = Math.max(activCharPl.character.attack - CharPC.character.defence, activCharPl.character.attack * 0.1);
      console.log(damageSize);
      const promise = this.gamePlay.showDamage(index, damageSize);
      promise.then(() => {
        //  –Ω–∏–∂–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä–æ–∫–∞ —Å –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º –∑–¥–æ—Ä–æ–≤—å—è
        const newArrCharePC = GameState.charPC.map((char) => {
          if (this.gamePlay.cells[char.position].classList.contains('selected-red')) {
            char.character.health -= damageSize;
            return char;
          } return char;
        }).filter((char) => char.character.health > 0);

        GameState.charPC = newArrCharePC;
        GameState.step = 'PC';
        this.arrSummCharPosition = [...GameState.charPC, ...GameState.charPl];
        // –≤—ã—à–µ –º–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –Ω–∞ –ø–æ–ª–µ
        this.gamePlay.redrawPositions(this.arrSummCharPosition);
        this.strokePC();
      });

      return;
    }
    // –µ—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª –ø–æ –∫–ª–µ—Ç–∫–µ –∏ —Ç–∞–º –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ —Ç–æ .....
    if (noomCellActivCharPl === -1) { // –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ—Ç —Ç–æ ....
      this.gamePlay.selectCell(CharPl.position);
      return;
    }
    if (!(noomCellActivCharPl === CharPl.position)) { // –µ—Å–ª–∏ –∫–ª–∏–Ω—Ç—É–ª –ø–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É –∏–≥—Ä–æ–∫–∞ ...
      this.gamePlay.deselectCell(noomCellActivCharPl);
      this.gamePlay.selectCell(CharPl.position);
    }
  }

  // eslint-disable-next-line class-methods-use-this
  strokePC() { // –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Ö–æ–¥–∞ PC
    // —Ä–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ PC.
    const activCharPC = GameState.charPC[Math.floor(Math.random() * GameState.charPC.length)];
    // –±–µ—Ä–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∑–æ–Ω–µ —É–¥–∞—Ä–∞ –∏–ª–∏ –Ω–µ—Ç
    const attackCharPl = GameState.charPl.find((char) => calcAreaAction(activCharPC.position, char.position, activCharPC.character.type, 'attack'));
    // _____________________ –Ω–∏–∂–µ –ª–æ–≥–∏–∫–∞ –∞—Ç–∞–∫–∏ PC __________________________
    if (attackCharPl) { // –µ—Å–ª–∏ –≤ –∑–æ–Ω–µ —É–¥–∞—Ä–∞ –µ—Å—Ç—å –∏–≥—Ä–æ–∫ —Ç–æ .....
      console.log(`—Å–µ–π—á–∞—Å —É–¥–∞—Ä–∏—Ç ${activCharPC} –ø–æ ${attackCharPl}`);

      const damageSize = Math.max(activCharPC.character.attack - attackCharPl.character.defence, activCharPC.character.attack * 0.1);
      console.log(damageSize);
      const promise = this.gamePlay.showDamage(attackCharPl.position, damageSize);
      promise.then(() => {
      //  –Ω–∏–∂–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ãx –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä–æ–∫–∞ —Å –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º –∑–¥–æ—Ä–æ–≤—å—è
        const newArrCharePL = GameState.charPl.map((char) => {
          if (char.position === attackCharPl.position) {
            char.character.health -= damageSize;
            return char;
          } return char;
        }).filter((char) => char.character.health > 0);
        GameState.charPl = newArrCharePL;
        GameState.step = 'Pl';
        this.arrSummCharPosition = [...GameState.charPC, ...GameState.charPl];
        // –≤—ã—à–µ –º–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –Ω–∞ –ø–æ–ª–µ
        this.gamePlay.redrawPositions(this.arrSummCharPosition);
      });
      // _____________________ –Ω–∏–∂–µ –ª–æ–≥–∏–∫–∞ —Ö–æ–¥–∞ PC __________________________
    } else {
      const moveSell = getMoveSellForPC(activCharPC, this.gamePlay.cells);
      const newArrCharePC = GameState.charPC.map((char) => {
        if (char.position === activCharPC.position) {
          char.position = moveSell;
          return char;
        } return char;
      });
      GameState.charPC = newArrCharePC;
      GameState.step = 'Pl';
      this.arrSummCharPosition = [...GameState.charPC, ...GameState.charPl];
      // –≤—ã—à–µ –º–∞—Å—Å–∏–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –Ω–∞ –ø–æ–ª–µ
      this.gamePlay.redrawPositions(this.arrSummCharPosition);

    }
  }

  onCellEnter(index) {
    // –±–ª–æ–∫ –æ—Ç–æ–±–æ–∞–∂–µ–Ω–∏—è —Ç—É–ª–±–∞—Ä–∞
    const activSellChar = this.arrSummCharPosition.find((element) => element.position === index);
    // –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫
    if (activSellChar) {
      const message = `üéñ${activSellChar.character.level} ‚öî${activSellChar.character.attack} 
      üõ°${activSellChar.character.defence} ‚ù§${activSellChar.character.health}`;
      this.gamePlay.showCellTooltip(message, index);
    }

    // –±–ª–æ–∫ –≤—ã–¥–µ–ª–µ–Ω–∏—è —è—á–µ–π–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const numActivSell = Array.from(this.gamePlay.cells)
      .findIndex((element) => element.classList.contains('selected') && element.firstChild);
      // –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–ª–∞—Å—Å–∞
    if (numActivSell !== -1) { // –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∏–≥—Ä–æ–∫ .....
      // let dist;
      const nameActivChar = GameState.charPl.find((char) => this.gamePlay.cells[char.position].classList.contains('selected-yellow')).character.type;

      if (calcAreaAction(numActivSell, index, nameActivChar, 'move')
       && !this.gamePlay.cells[index].firstChild) { // –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ä–∞–∑—Ä–µ—à–æ–Ω–Ω—ã—Ö –¥–ª—è —Ö–æ–¥–∞ –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Ç–æ ...
        this.gamePlay.selectCell(index, 'green');
        this.gamePlay.setCursor(cursors.pointer);
      } else {
        this.gamePlay.setCursor(cursors.notallowed);
      }
      // –±–ª–æ–∫ –≤—ã–¥–µ–ª–µ–Ω–∏—è —è—á–µ–π–∫–∏ —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º
      if ((calcAreaAction(numActivSell, index, nameActivChar, 'attack'))
      && GameState.charPC.find((char) => char.position === index)) {
        // –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Ä–∞–∑—Ä–µ—à–æ–Ω–Ω—ã—Ö –¥–ª—è –∞—Ç–∞–∫–∏ –∏ —ç—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –ü–ö —Ç–æ .
        this.gamePlay.selectCell(index, 'red');
        this.gamePlay.setCursor(cursors.crosshair);
      }
    }
    // –±–ª–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–æ—Ä–∞
    for (const char of GameState.charPl) {
      if (char.position === index) {
        this.gamePlay.setCursor(cursors.pointer);
      }
    }
  }

  onCellLeave(index) {
    this.gamePlay.hideCellTooltip(index);
    this.gamePlay.setCursor(cursors.auto);
    const indexSellWithoutChar = Array.from(this.gamePlay.cells).findIndex((element) => element.classList
      .contains('selected') && !element.firstChild);
    // –Ω–æ–º–µ—Ä –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π —è—á–µ–π–∫–∏ –ø—É—Å—Ç–æ–π –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

    if (indexSellWithoutChar !== -1) { // –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ç–æ ...
      this.gamePlay.deselectCell(indexSellWithoutChar);
    }
    const activCharPC = GameState.charPC.find((charPC) => this.gamePlay.cells[charPC.position].classList.contains('selected'));
    // –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –ü–ö
    if (activCharPC) {
      this.gamePlay.deselectCell(activCharPC.position);
    // TODO: react to mouse leave
    }
  }
}
